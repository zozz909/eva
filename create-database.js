// ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงูุฌุฏุงูู ุชููุงุฆูุงู
// Auto Database and Tables Creation for MENU EVA

const mysql = require('mysql2/promise');
const fs = require('fs').promises;
const path = require('path');

// ุฅุนุฏุงุฏุงุช ุงูุงุชุตุงู ุจู MySQL (ุจุฏูู ูุงุนุฏุฉ ุจูุงูุงุช ูุญุฏุฏุฉ)
const dbConfig = {
  host: 'localhost',
  port: 3306,
  user: 'root',
  password: '123',
  charset: 'utf8mb4',
  multipleStatements: true
};

async function createDatabase() {
  console.log('๐ ุจุฏุก ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช MENU EVA...\n');
  
  let connection;
  
  try {
    // ุงูุงุชุตุงู ุจู MySQL
    console.log('๐ ุงูุงุชุตุงู ุจู MySQL...');
    connection = await mysql.createConnection(dbConfig);
    console.log('โ ุชู ุงูุงุชุตุงู ุจู MySQL ุจูุฌุงุญ!');
    
    // ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช
    console.log('\n๐ ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช...');
    await connection.execute(`
      CREATE DATABASE IF NOT EXISTS menu_eva_db 
      CHARACTER SET utf8mb4 
      COLLATE utf8mb4_unicode_ci
    `);
    console.log('โ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช menu_eva_db');
    
    // ุฅุบูุงู ุงูุงุชุตุงู ุงูุญุงูู ูุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ
    await connection.end();

    const dbConfigWithDB = { ...dbConfig, database: 'menu_eva_db' };
    connection = await mysql.createConnection(dbConfigWithDB);
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช menu_eva_db');

    // ุฅูุดุงุก ุงูุฌุฏุงูู ูุจุงุดุฑุฉ
    console.log('\nโ๏ธ ุฅูุดุงุก ุงูุฌุฏุงูู...');
    await createTablesManually(connection);
    
    // ุงูุชุญูู ูู ุงูุฌุฏุงูู
    console.log('\n๐ ุงูุชุญูู ูู ุงูุฌุฏุงูู ุงููููุดุฃุฉ...');
    const [tables] = await connection.execute('SHOW TABLES');
    console.log('๐ ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ:');
    tables.forEach((table, index) => {
      console.log(`   ${index + 1}. ${Object.values(table)[0]}`);
    });
    
    // ุงูุชุญูู ูู ุงูุจูุงูุงุช
    console.log('\n๐ ุงูุชุญูู ูู ุงูุจูุงูุงุช...');
    await checkData(connection);
    
    console.log('\n๐ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
    console.log('๐ ููููู ุงูุขู ุงููุตูู ุฅูููุง ุนุจุฑ: http://localhost/phpmyadmin');
    
  } catch (error) {
    console.error('\nโ ุฎุทุฃ ูู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
    console.error('   ุงูุณุจุจ:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\n๐ก ุญููู ููุชุฑุญุฉ:');
      console.log('   1. ุชุฃูุฏ ูู ุชุดุบูู XAMPP');
      console.log('   2. ุชุฃูุฏ ูู ุชุดุบูู ุฎุฏูุฉ MySQL ูู XAMPP Control Panel');
      console.log('   3. ุชุญูู ูู ุฃู ุงูุจูุฑุช 3306 ูุชุงุญ');
    } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.log('\n๐ก ุญููู ููุชุฑุญุฉ:');
      console.log('   1. ุชุญูู ูู ุงุณู ุงููุณุชุฎุฏู ููููุฉ ุงููุฑูุฑ');
      console.log('   2. ุฌุฑุจ ุชุบููุฑ ูููุฉ ุงููุฑูุฑ ุฅูู ูุงุฑุบุฉ ูู XAMPP');
      console.log('   3. ุฃุนุฏ ุชุดุบูู ุฎุฏูุฉ MySQL');
    }
  } finally {
    if (connection) {
      await connection.end();
      console.log('\n๐ ุชู ุฅุบูุงู ุงูุงุชุตุงู');
    }
  }
}

async function createTablesManually(connection) {
  console.log('๐ ุฅูุดุงุก ุงูุฌุฏุงูู ูุฏููุงู...');
  
  // ุฅูุดุงุก ุฌุฏูู ุงูุฃุตูุงู
  await connection.execute(`
    CREATE TABLE IF NOT EXISTS categories (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(100) NOT NULL,
      description TEXT,
      display_order INT DEFAULT 0,
      is_active BOOLEAN DEFAULT TRUE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    )
  `);
  
  // ุฅูุดุงุก ุฌุฏูู ุงูููุชุฌุงุช
  await connection.execute(`
    CREATE TABLE IF NOT EXISTS products (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(200) NOT NULL,
      description TEXT,
      price DECIMAL(10, 2) NOT NULL,
      original_price DECIMAL(10, 2) NULL,
      image_url VARCHAR(500),
      category_id INT NOT NULL,
      is_available BOOLEAN DEFAULT TRUE,
      is_featured BOOLEAN DEFAULT FALSE,
      display_order INT DEFAULT 0,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
    )
  `);
  
  // ุฅูุดุงุก ุฌุฏูู ุงูุจูุฑุงุช
  await connection.execute(`
    CREATE TABLE IF NOT EXISTS promotions (
      id INT AUTO_INCREMENT PRIMARY KEY,
      title VARCHAR(200) NOT NULL,
      description TEXT,
      image_url VARCHAR(500),
      is_active BOOLEAN DEFAULT TRUE,
      display_order INT DEFAULT 0,
      start_date DATE,
      end_date DATE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    )
  `);
  
  // ุฅูุดุงุก ุฌุฏูู ุงูุฎุตููุงุช
  await connection.execute(`
    CREATE TABLE IF NOT EXISTS discounts (
      id INT AUTO_INCREMENT PRIMARY KEY,
      code VARCHAR(50) UNIQUE NOT NULL,
      percentage DECIMAL(5, 2) NOT NULL,
      status ENUM('active', 'expired', 'disabled') DEFAULT 'active',
      usage_limit INT DEFAULT NULL,
      used_count INT DEFAULT 0,
      start_date DATE,
      end_date DATE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    )
  `);
  
  // ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุฃูููุฉ
  await insertInitialData(connection);
  
  console.log('โ ุชู ุฅูุดุงุก ุงูุฌุฏุงูู ูุฏููุงู ุจูุฌุงุญ!');
}

async function insertInitialData(connection) {
  console.log('๐ ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุฃูููุฉ...');
  
  // ุฅุฏุฑุงุฌ ุงูุฃุตูุงู
  await connection.execute(`
    INSERT IGNORE INTO categories (id, name, display_order) VALUES
    (1, 'ููุจูุงุช', 1),
    (2, 'ุงูุฃุทุจุงู ุงูุฑุฆูุณูุฉ', 2),
    (3, 'ุญูููุงุช', 3),
    (4, 'ูุดุฑูุจุงุช', 4)
  `);
  
  // ุฅุฏุฑุงุฌ ุงูููุชุฌุงุช
  await connection.execute(`
    INSERT IGNORE INTO products (id, name, description, price, original_price, image_url, category_id, display_order) VALUES
    (1, 'ุจุฑูุดูุชุง', 'ุฎุจุฒ ูุดูู ูุน ุทูุงุทูุ ุซููุ ูุฒูุช ุฒูุชูู.', 6.99, 8.99, 'https://placehold.co/600x600.png', 1, 1),
    (2, 'ุณูุทุฉ ูุงุจุฑูุฒู', 'ููุฒุงุฑููุง ุทุงุฒุฌุฉุ ุทูุงุทูุ ูุฑูุญุงู.', 10.50, NULL, 'https://placehold.co/600x600.png', 1, 2),
    (3, 'ุณุจุงุบูุชู ูุงุฑุจููุงุฑุง', 'ุจุงุณุชุง ูุน ุจูุถุ ุฌุจูุ ุจุงูุดูุชุงุ ููููู.', 12.99, 15.99, 'https://placehold.co/600x600.png', 2, 1),
    (4, 'ุจูุชุฒุง ูุงุฑุฌุฑูุชุง', 'ุจูุชุฒุง ููุงุณูููุฉ ูุน ุทูุงุทูุ ููุฒุงุฑููุงุ ูุฑูุญุงู.', 14.50, NULL, 'https://placehold.co/600x600.png', 2, 2),
    (5, 'ุณูููู ูุดูู', 'ุดุฑูุญุฉ ุณูููู ูุน ููููู ุฌุงูุจู.', 18.99, 22.00, 'https://placehold.co/600x600.png', 2, 3)
  `);
  
  // ุฅุฏุฑุงุฌ ุงูุจูุฑุงุช
  await connection.execute(`
    INSERT IGNORE INTO promotions (id, title, description, image_url, display_order) VALUES
    (1, 'ูุงุฆูุฉ ุงูุตูู ุงูุฌุฏูุฏุฉ!', 'ุชุฐูู ูุถุงุฑุฉ ุฃุทุจุงููุง ุงูููุณููุฉ ุงูุฌุฏูุฏุฉ.', 'https://placehold.co/1200x500.png', 1),
    (2, 'ุณุงุนุฉ ุงูุณุนุงุฏุฉ 5-7 ูุณุงุกู', 'ุงุญุตู ุนูู ุฎุตู 50ูช ุนูู ุฌููุน ุงููุดุฑูุจุงุช.', 'https://placehold.co/1200x500.png', 2)
  `);
  
  // ุฅุฏุฑุงุฌ ุงูุฎุตููุงุช
  await connection.execute(`
    INSERT IGNORE INTO discounts (id, code, percentage, status) VALUES
    (1, 'SUMMER24', 15.00, 'active'),
    (2, 'WELCOME10', 10.00, 'active')
  `);
}

async function checkData(connection) {
  const [categories] = await connection.execute('SELECT COUNT(*) as count FROM categories');
  console.log(`   ๐ ุงูุฃุตูุงู: ${categories[0].count}`);
  
  const [products] = await connection.execute('SELECT COUNT(*) as count FROM products');
  console.log(`   ๐ฝ๏ธ ุงูููุชุฌุงุช: ${products[0].count}`);
  
  const [promotions] = await connection.execute('SELECT COUNT(*) as count FROM promotions');
  console.log(`   ๐ฏ ุงูุจูุฑุงุช: ${promotions[0].count}`);
  
  const [discounts] = await connection.execute('SELECT COUNT(*) as count FROM discounts');
  console.log(`   ๐ซ ุงูุฎุตููุงุช: ${discounts[0].count}`);
}

// ุชุดุบูู ุงูุฏุงูุฉ
createDatabase();
